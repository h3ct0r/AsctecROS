/* Auto-generated by genmsg_cpp for file /opt/ros/groovy/share/asctec_drivers/asctec_msgs/msg/CurrentWay.msg */
#ifndef ASCTEC_MSGS_MESSAGE_CURRENTWAY_H
#define ASCTEC_MSGS_MESSAGE_CURRENTWAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace asctec_msgs
{
template <class ContainerAllocator>
struct CurrentWay_ {
  typedef CurrentWay_<ContainerAllocator> Type;

  CurrentWay_()
  : header()
  , dummy1(0)
  , properties(0)
  , nr_of_wp(0)
  , current_wp(0)
  , current_wp_memlocation(0)
  , status(0)
  , dummy2(0)
  , navigation_status(0)
  , distance_to_wp(0)
  {
  }

  CurrentWay_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , dummy1(0)
  , properties(0)
  , nr_of_wp(0)
  , current_wp(0)
  , current_wp_memlocation(0)
  , status(0)
  , dummy2(0)
  , navigation_status(0)
  , distance_to_wp(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _dummy1_type;
  uint8_t dummy1;

  typedef uint8_t _properties_type;
  uint8_t properties;

  typedef uint16_t _nr_of_wp_type;
  uint16_t nr_of_wp;

  typedef uint8_t _current_wp_type;
  uint8_t current_wp;

  typedef uint8_t _current_wp_memlocation_type;
  uint8_t current_wp_memlocation;

  typedef uint8_t _status_type;
  uint8_t status;

  typedef uint8_t _dummy2_type;
  uint8_t dummy2;

  typedef uint16_t _navigation_status_type;
  uint16_t navigation_status;

  typedef uint16_t _distance_to_wp_type;
  uint16_t distance_to_wp;


  typedef boost::shared_ptr< ::asctec_msgs::CurrentWay_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_msgs::CurrentWay_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CurrentWay
typedef  ::asctec_msgs::CurrentWay_<std::allocator<void> > CurrentWay;

typedef boost::shared_ptr< ::asctec_msgs::CurrentWay> CurrentWayPtr;
typedef boost::shared_ptr< ::asctec_msgs::CurrentWay const> CurrentWayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asctec_msgs::CurrentWay_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asctec_msgs::CurrentWay_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asctec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::asctec_msgs::CurrentWay_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::asctec_msgs::CurrentWay_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::asctec_msgs::CurrentWay_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d25aae02ea1a55cb5a3abd0dd055622";
  }

  static const char* value(const  ::asctec_msgs::CurrentWay_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d25aae02ea1a55cULL;
  static const uint64_t static_value2 = 0xb5a3abd0dd055622ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_msgs::CurrentWay_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asctec_msgs/CurrentWay";
  }

  static const char* value(const  ::asctec_msgs::CurrentWay_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asctec_msgs::CurrentWay_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Software License Agreement (BSD License)\n\
#\n\
# Copyright (c) 2014\n\
#  Hector Azpurua <hector.azpurua@dcc.ufmg.br>\n\
# All rights reserved.\n\
#\n\
# Redistribution and use in source and binary forms, with or without\n\
# modification, are permitted provided that the following conditions\n\
# are met:\n\
#\n\
#  * Redistributions of source code must retain the above copyright\n\
#    notice, this list of conditions and the following disclaimer.\n\
#  * Redistributions in binary form must reproduce the above\n\
#    copyright notice, this list of conditions and the following\n\
#    disclaimer in the documentation and/or other materials provided\n\
#    with the distribution.\n\
#  * Neither the name of CCNY Robotics Lab nor the names of its\n\
#    contributors may be used to endorse or promote products derived\n\
#    from this software without specific prior written permission.\n\
#\n\
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\
# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\
# POSSIBILITY OF SUCH DAMAGE.\n\
\n\
Header header\n\
# See http://asctec-users.986163.n3.nabble.com/How-to-see-if-the-UAV-has-reached-a-waypoint-td3245304.html\n\
# for clarification\n\
# _CurrentWay\n\
uint8 dummy1\n\
uint8 properties\n\
uint16 nr_of_wp\n\
uint8 current_wp\n\
uint8 current_wp_memlocation\n\
uint8 status\n\
uint8 dummy2\n\
uint16 navigation_status\n\
uint16 distance_to_wp\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::asctec_msgs::CurrentWay_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::asctec_msgs::CurrentWay_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::asctec_msgs::CurrentWay_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asctec_msgs::CurrentWay_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.dummy1);
    stream.next(m.properties);
    stream.next(m.nr_of_wp);
    stream.next(m.current_wp);
    stream.next(m.current_wp_memlocation);
    stream.next(m.status);
    stream.next(m.dummy2);
    stream.next(m.navigation_status);
    stream.next(m.distance_to_wp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CurrentWay_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_msgs::CurrentWay_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asctec_msgs::CurrentWay_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dummy1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dummy1);
    s << indent << "properties: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.properties);
    s << indent << "nr_of_wp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.nr_of_wp);
    s << indent << "current_wp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_wp);
    s << indent << "current_wp_memlocation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_wp_memlocation);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "dummy2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dummy2);
    s << indent << "navigation_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.navigation_status);
    s << indent << "distance_to_wp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance_to_wp);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASCTEC_MSGS_MESSAGE_CURRENTWAY_H


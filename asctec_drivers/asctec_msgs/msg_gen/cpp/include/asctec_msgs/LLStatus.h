/* Auto-generated by genmsg_cpp for file /opt/ros/groovy/share/asctec_drivers/asctec_msgs/msg/LLStatus.msg */
#ifndef ASCTEC_MSGS_MESSAGE_LLSTATUS_H
#define ASCTEC_MSGS_MESSAGE_LLSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace asctec_msgs
{
template <class ContainerAllocator>
struct LLStatus_ {
  typedef LLStatus_<ContainerAllocator> Type;

  LLStatus_()
  : header()
  , battery_voltage_1(0)
  , battery_voltage_2(0)
  , status(0)
  , cpu_load(0)
  , compass_enabled(0)
  , chksum_error(0)
  , flying(0)
  , motors_on(0)
  , flightMode(0)
  , up_time(0)
  {
  }

  LLStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , battery_voltage_1(0)
  , battery_voltage_2(0)
  , status(0)
  , cpu_load(0)
  , compass_enabled(0)
  , chksum_error(0)
  , flying(0)
  , motors_on(0)
  , flightMode(0)
  , up_time(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int16_t _battery_voltage_1_type;
  int16_t battery_voltage_1;

  typedef int16_t _battery_voltage_2_type;
  int16_t battery_voltage_2;

  typedef int16_t _status_type;
  int16_t status;

  typedef int16_t _cpu_load_type;
  int16_t cpu_load;

  typedef int8_t _compass_enabled_type;
  int8_t compass_enabled;

  typedef int8_t _chksum_error_type;
  int8_t chksum_error;

  typedef int8_t _flying_type;
  int8_t flying;

  typedef int8_t _motors_on_type;
  int8_t motors_on;

  typedef int16_t _flightMode_type;
  int16_t flightMode;

  typedef int16_t _up_time_type;
  int16_t up_time;


  typedef boost::shared_ptr< ::asctec_msgs::LLStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_msgs::LLStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LLStatus
typedef  ::asctec_msgs::LLStatus_<std::allocator<void> > LLStatus;

typedef boost::shared_ptr< ::asctec_msgs::LLStatus> LLStatusPtr;
typedef boost::shared_ptr< ::asctec_msgs::LLStatus const> LLStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asctec_msgs::LLStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asctec_msgs::LLStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asctec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::asctec_msgs::LLStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::asctec_msgs::LLStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::asctec_msgs::LLStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0dae36eea5774367686a40e1843c5e2";
  }

  static const char* value(const  ::asctec_msgs::LLStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe0dae36eea577436ULL;
  static const uint64_t static_value2 = 0x7686a40e1843c5e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_msgs::LLStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asctec_msgs/LLStatus";
  }

  static const char* value(const  ::asctec_msgs::LLStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asctec_msgs::LLStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Software License Agreement (BSD License)\n\
#\n\
# Copyright (c) 2010\n\
#  William Morris <morris@ee.ccny.cuny.edu>\n\
#  Ivan Dryanovski <ivan.dryanovski@gmail.com>\n\
# All rights reserved.\n\
#\n\
# Redistribution and use in source and binary forms, with or without\n\
# modification, are permitted provided that the following conditions\n\
# are met:\n\
#\n\
#  * Redistributions of source code must retain the above copyright\n\
#    notice, this list of conditions and the following disclaimer.\n\
#  * Redistributions in binary form must reproduce the above\n\
#    copyright notice, this list of conditions and the following\n\
#    disclaimer in the documentation and/or other materials provided\n\
#    with the distribution.\n\
#  * Neither the name of CCNY Robotics Lab nor the names of its\n\
#    contributors may be used to endorse or promote products derived\n\
#    from this software without specific prior written permission.\n\
#\n\
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\
# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\
# POSSIBILITY OF SUCH DAMAGE.\n\
\n\
Header header\n\
# battery voltages in mV\n\
int16 battery_voltage_1\n\
int16 battery_voltage_2\n\
# dont care\n\
int16 status\n\
# Controller cycles per second (should be about 1000)\n\
int16 cpu_load\n\
# dont care\n\
int8 compass_enabled\n\
int8 chksum_error\n\
int8 flying\n\
int8 motors_on\n\
int16 flightMode\n\
# Time motors are turning\n\
int16 up_time\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::asctec_msgs::LLStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::asctec_msgs::LLStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::asctec_msgs::LLStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asctec_msgs::LLStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.battery_voltage_1);
    stream.next(m.battery_voltage_2);
    stream.next(m.status);
    stream.next(m.cpu_load);
    stream.next(m.compass_enabled);
    stream.next(m.chksum_error);
    stream.next(m.flying);
    stream.next(m.motors_on);
    stream.next(m.flightMode);
    stream.next(m.up_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LLStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_msgs::LLStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asctec_msgs::LLStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_voltage_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_voltage_1);
    s << indent << "battery_voltage_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_voltage_2);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "cpu_load: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cpu_load);
    s << indent << "compass_enabled: ";
    Printer<int8_t>::stream(s, indent + "  ", v.compass_enabled);
    s << indent << "chksum_error: ";
    Printer<int8_t>::stream(s, indent + "  ", v.chksum_error);
    s << indent << "flying: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flying);
    s << indent << "motors_on: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motors_on);
    s << indent << "flightMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flightMode);
    s << indent << "up_time: ";
    Printer<int16_t>::stream(s, indent + "  ", v.up_time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASCTEC_MSGS_MESSAGE_LLSTATUS_H


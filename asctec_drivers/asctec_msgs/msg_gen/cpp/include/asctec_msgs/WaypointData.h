/* Auto-generated by genmsg_cpp for file /opt/ros/groovy/share/asctec_drivers/asctec_msgs/msg/WaypointData.msg */
#ifndef ASCTEC_MSGS_MESSAGE_WAYPOINTDATA_H
#define ASCTEC_MSGS_MESSAGE_WAYPOINTDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace asctec_msgs
{
template <class ContainerAllocator>
struct WaypointData_ {
  typedef WaypointData_<ContainerAllocator> Type;

  WaypointData_()
  : header()
  , wp_number(0)
  , dummy_1(0)
  , dummy_2(0)
  , properties(0)
  , max_speed(0)
  , time(0)
  , pos_acc(0)
  , chksum(0)
  , X(0)
  , Y(0)
  , yaw(0)
  , height(0)
  {
  }

  WaypointData_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , wp_number(0)
  , dummy_1(0)
  , dummy_2(0)
  , properties(0)
  , max_speed(0)
  , time(0)
  , pos_acc(0)
  , chksum(0)
  , X(0)
  , Y(0)
  , yaw(0)
  , height(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _wp_number_type;
  uint8_t wp_number;

  typedef uint8_t _dummy_1_type;
  uint8_t dummy_1;

  typedef uint16_t _dummy_2_type;
  uint16_t dummy_2;

  typedef uint8_t _properties_type;
  uint8_t properties;

  typedef uint8_t _max_speed_type;
  uint8_t max_speed;

  typedef uint16_t _time_type;
  uint16_t time;

  typedef uint16_t _pos_acc_type;
  uint16_t pos_acc;

  typedef int16_t _chksum_type;
  int16_t chksum;

  typedef int32_t _X_type;
  int32_t X;

  typedef int32_t _Y_type;
  int32_t Y;

  typedef int32_t _yaw_type;
  int32_t yaw;

  typedef int32_t _height_type;
  int32_t height;

  enum { WPPROP_ABSCOORDS = 1 };
  enum { WPPROP_HEIGHTENABLED = 2 };
  enum { WPPROP_YAWENABLED = 4 };
  enum { WPPROP_AUTOMATICGOTO = 16 };
  enum { WPPROP_CAM_TRIGGER = 32 };

  typedef boost::shared_ptr< ::asctec_msgs::WaypointData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_msgs::WaypointData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WaypointData
typedef  ::asctec_msgs::WaypointData_<std::allocator<void> > WaypointData;

typedef boost::shared_ptr< ::asctec_msgs::WaypointData> WaypointDataPtr;
typedef boost::shared_ptr< ::asctec_msgs::WaypointData const> WaypointDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asctec_msgs::WaypointData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asctec_msgs::WaypointData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asctec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::asctec_msgs::WaypointData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::asctec_msgs::WaypointData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::asctec_msgs::WaypointData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1aea889573a3c976bdc966a2229943a6";
  }

  static const char* value(const  ::asctec_msgs::WaypointData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1aea889573a3c976ULL;
  static const uint64_t static_value2 = 0xbdc966a2229943a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_msgs::WaypointData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asctec_msgs/WaypointData";
  }

  static const char* value(const  ::asctec_msgs::WaypointData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asctec_msgs::WaypointData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#always set to 1\n\
uint8 wp_number\n\
\n\
#don't care\n\
uint8 dummy_1\n\
uint16 dummy_2\n\
\n\
#see WPPROP defines below\n\
uint8 properties\n\
\n\
#max speed to travel to waypoint in % (default 100)\n\
uint8 max_speed\n\
\n\
#time to stay at a waypoint (XYZ) in 1/100th s\n\
uint16 time\n\
\n\
#position accuracy to consider a waypoint reached in mm (default: 2500 (= 2.5 m))\n\
uint16 pos_acc\n\
\n\
#chksum = 0xAAAA + wp.yaw + wp.height + wp.time + wp.X + wp.Y + wp.max_speed + wp.pos_acc + wp.properties + wp.wp_number\n\
int16 chksum\n\
\n\
#waypoint coordinates in mm; longitude in abs coords\n\
int32 X\n\
\n\
#waypoint coordinates in mm; latitude in abs coords\n\
int32 Y\n\
\n\
#Desired heading at waypoint\n\
int32 yaw\n\
\n\
#height over 0 reference in mm\n\
int32 height\n\
\n\
uint32 WPPROP_ABSCOORDS=1\n\
uint32 WPPROP_HEIGHTENABLED=2\n\
uint32 WPPROP_YAWENABLED=4\n\
uint32 WPPROP_AUTOMATICGOTO=16\n\
uint32 WPPROP_CAM_TRIGGER=32\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::asctec_msgs::WaypointData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::asctec_msgs::WaypointData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::asctec_msgs::WaypointData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asctec_msgs::WaypointData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.wp_number);
    stream.next(m.dummy_1);
    stream.next(m.dummy_2);
    stream.next(m.properties);
    stream.next(m.max_speed);
    stream.next(m.time);
    stream.next(m.pos_acc);
    stream.next(m.chksum);
    stream.next(m.X);
    stream.next(m.Y);
    stream.next(m.yaw);
    stream.next(m.height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WaypointData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_msgs::WaypointData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asctec_msgs::WaypointData_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "wp_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wp_number);
    s << indent << "dummy_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dummy_1);
    s << indent << "dummy_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dummy_2);
    s << indent << "properties: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.properties);
    s << indent << "max_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.max_speed);
    s << indent << "time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time);
    s << indent << "pos_acc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pos_acc);
    s << indent << "chksum: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chksum);
    s << indent << "X: ";
    Printer<int32_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Y);
    s << indent << "yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASCTEC_MSGS_MESSAGE_WAYPOINTDATA_H


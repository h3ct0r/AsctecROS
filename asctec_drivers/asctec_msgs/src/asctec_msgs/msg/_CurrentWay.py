"""autogenerated by genpy from asctec_msgs/CurrentWay.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class CurrentWay(genpy.Message):
  _md5sum = "6d25aae02ea1a55cb5a3abd0dd055622"
  _type = "asctec_msgs/CurrentWay"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Software License Agreement (BSD License)
#
# Copyright (c) 2014
#  Hector Azpurua <hector.azpurua@dcc.ufmg.br>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of CCNY Robotics Lab nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

Header header
# See http://asctec-users.986163.n3.nabble.com/How-to-see-if-the-UAV-has-reached-a-waypoint-td3245304.html
# for clarification
# _CurrentWay
uint8 dummy1
uint8 properties
uint16 nr_of_wp
uint8 current_wp
uint8 current_wp_memlocation
uint8 status
uint8 dummy2
uint16 navigation_status
uint16 distance_to_wp
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','dummy1','properties','nr_of_wp','current_wp','current_wp_memlocation','status','dummy2','navigation_status','distance_to_wp']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint16','uint8','uint8','uint8','uint8','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,dummy1,properties,nr_of_wp,current_wp,current_wp_memlocation,status,dummy2,navigation_status,distance_to_wp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CurrentWay, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.dummy1 is None:
        self.dummy1 = 0
      if self.properties is None:
        self.properties = 0
      if self.nr_of_wp is None:
        self.nr_of_wp = 0
      if self.current_wp is None:
        self.current_wp = 0
      if self.current_wp_memlocation is None:
        self.current_wp_memlocation = 0
      if self.status is None:
        self.status = 0
      if self.dummy2 is None:
        self.dummy2 = 0
      if self.navigation_status is None:
        self.navigation_status = 0
      if self.distance_to_wp is None:
        self.distance_to_wp = 0
    else:
      self.header = std_msgs.msg.Header()
      self.dummy1 = 0
      self.properties = 0
      self.nr_of_wp = 0
      self.current_wp = 0
      self.current_wp_memlocation = 0
      self.status = 0
      self.dummy2 = 0
      self.navigation_status = 0
      self.distance_to_wp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2BH4B2H.pack(_x.dummy1, _x.properties, _x.nr_of_wp, _x.current_wp, _x.current_wp_memlocation, _x.status, _x.dummy2, _x.navigation_status, _x.distance_to_wp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.dummy1, _x.properties, _x.nr_of_wp, _x.current_wp, _x.current_wp_memlocation, _x.status, _x.dummy2, _x.navigation_status, _x.distance_to_wp,) = _struct_2BH4B2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2BH4B2H.pack(_x.dummy1, _x.properties, _x.nr_of_wp, _x.current_wp, _x.current_wp_memlocation, _x.status, _x.dummy2, _x.navigation_status, _x.distance_to_wp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.dummy1, _x.properties, _x.nr_of_wp, _x.current_wp, _x.current_wp_memlocation, _x.status, _x.dummy2, _x.navigation_status, _x.distance_to_wp,) = _struct_2BH4B2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2BH4B2H = struct.Struct("<2BH4B2H")

"""autogenerated by genpy from asctec_msgs/IMUCalcData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class IMUCalcData(genpy.Message):
  _md5sum = "69fa9ec7b73af705eabe7dcbfd39ac85"
  _type = "asctec_msgs/IMUCalcData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Software License Agreement (BSD License)
#
# Copyright (c) 2010
#  William Morris <morris@ee.ccny.cuny.edu>
#  Ivan Dryanovski <ivan.dryanovski@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of CCNY Robotics Lab nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

Header header
# angles derived by integration of gyro_outputs, drift compensated by data fusion;
#-90000..+90000 pitch(nick) and roll, 0..360000 yaw; 1000 = 1 degree

int32 angle_nick
int32 angle_roll
int32 angle_yaw

# angular velocities, raw values [16 bit], bias free, in 0.0154 degree/s (=> 64.8 = 1 degree/s)

int32 angvel_nick
int32 angvel_roll
int32 angvel_yaw

# acc-sensor outputs, calibrated: -10000..+10000 = -1g..+1g

int16 acc_x_calib
int16 acc_y_calib
int16 acc_z_calib

# horizontal / vertical accelerations: -10000..+10000 = -1g..+1g

int16 acc_x
int16 acc_y
int16 acc_z

# reference angles derived by accelerations only: -90000..+90000; 1000 = 1 degree

int32 acc_angle_nick
int32 acc_angle_roll

# total acceleration measured (10000 = 1g)

int32 acc_absolute_value

# magnetic field sensors output, offset free and scaled; units not determined, 
# as only the direction of the field vector is taken into account

int32 Hx
int32 Hy
int32 Hz

# compass reading: angle reference for angle_yaw: 0..360000; 1000 = 1 degree

int32 mag_heading

# pseudo speed measurements: integrated accelerations, pulled towards zero; units unknown;
# used for short-term position stabilization

int32 speed_x
int32 speed_y
int32 speed_z

# height in mm (after data fusion)

int32 height

# diff. height in mm/s (after data fusion)

int32 dheight

# diff. height measured by the pressure sensor [mm/s]

int32 dheight_reference

# height measured by the pressure sensor [mm]

int32 height_reference


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','angle_nick','angle_roll','angle_yaw','angvel_nick','angvel_roll','angvel_yaw','acc_x_calib','acc_y_calib','acc_z_calib','acc_x','acc_y','acc_z','acc_angle_nick','acc_angle_roll','acc_absolute_value','Hx','Hy','Hz','mag_heading','speed_x','speed_y','speed_z','height','dheight','dheight_reference','height_reference']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int16','int16','int16','int16','int16','int16','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,angle_nick,angle_roll,angle_yaw,angvel_nick,angvel_roll,angvel_yaw,acc_x_calib,acc_y_calib,acc_z_calib,acc_x,acc_y,acc_z,acc_angle_nick,acc_angle_roll,acc_absolute_value,Hx,Hy,Hz,mag_heading,speed_x,speed_y,speed_z,height,dheight,dheight_reference,height_reference

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUCalcData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.angle_nick is None:
        self.angle_nick = 0
      if self.angle_roll is None:
        self.angle_roll = 0
      if self.angle_yaw is None:
        self.angle_yaw = 0
      if self.angvel_nick is None:
        self.angvel_nick = 0
      if self.angvel_roll is None:
        self.angvel_roll = 0
      if self.angvel_yaw is None:
        self.angvel_yaw = 0
      if self.acc_x_calib is None:
        self.acc_x_calib = 0
      if self.acc_y_calib is None:
        self.acc_y_calib = 0
      if self.acc_z_calib is None:
        self.acc_z_calib = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.acc_z is None:
        self.acc_z = 0
      if self.acc_angle_nick is None:
        self.acc_angle_nick = 0
      if self.acc_angle_roll is None:
        self.acc_angle_roll = 0
      if self.acc_absolute_value is None:
        self.acc_absolute_value = 0
      if self.Hx is None:
        self.Hx = 0
      if self.Hy is None:
        self.Hy = 0
      if self.Hz is None:
        self.Hz = 0
      if self.mag_heading is None:
        self.mag_heading = 0
      if self.speed_x is None:
        self.speed_x = 0
      if self.speed_y is None:
        self.speed_y = 0
      if self.speed_z is None:
        self.speed_z = 0
      if self.height is None:
        self.height = 0
      if self.dheight is None:
        self.dheight = 0
      if self.dheight_reference is None:
        self.dheight_reference = 0
      if self.height_reference is None:
        self.height_reference = 0
    else:
      self.header = std_msgs.msg.Header()
      self.angle_nick = 0
      self.angle_roll = 0
      self.angle_yaw = 0
      self.angvel_nick = 0
      self.angvel_roll = 0
      self.angvel_yaw = 0
      self.acc_x_calib = 0
      self.acc_y_calib = 0
      self.acc_z_calib = 0
      self.acc_x = 0
      self.acc_y = 0
      self.acc_z = 0
      self.acc_angle_nick = 0
      self.acc_angle_roll = 0
      self.acc_absolute_value = 0
      self.Hx = 0
      self.Hy = 0
      self.Hz = 0
      self.mag_heading = 0
      self.speed_x = 0
      self.speed_y = 0
      self.speed_z = 0
      self.height = 0
      self.dheight = 0
      self.dheight_reference = 0
      self.height_reference = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6i6h14i.pack(_x.angle_nick, _x.angle_roll, _x.angle_yaw, _x.angvel_nick, _x.angvel_roll, _x.angvel_yaw, _x.acc_x_calib, _x.acc_y_calib, _x.acc_z_calib, _x.acc_x, _x.acc_y, _x.acc_z, _x.acc_angle_nick, _x.acc_angle_roll, _x.acc_absolute_value, _x.Hx, _x.Hy, _x.Hz, _x.mag_heading, _x.speed_x, _x.speed_y, _x.speed_z, _x.height, _x.dheight, _x.dheight_reference, _x.height_reference))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 92
      (_x.angle_nick, _x.angle_roll, _x.angle_yaw, _x.angvel_nick, _x.angvel_roll, _x.angvel_yaw, _x.acc_x_calib, _x.acc_y_calib, _x.acc_z_calib, _x.acc_x, _x.acc_y, _x.acc_z, _x.acc_angle_nick, _x.acc_angle_roll, _x.acc_absolute_value, _x.Hx, _x.Hy, _x.Hz, _x.mag_heading, _x.speed_x, _x.speed_y, _x.speed_z, _x.height, _x.dheight, _x.dheight_reference, _x.height_reference,) = _struct_6i6h14i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6i6h14i.pack(_x.angle_nick, _x.angle_roll, _x.angle_yaw, _x.angvel_nick, _x.angvel_roll, _x.angvel_yaw, _x.acc_x_calib, _x.acc_y_calib, _x.acc_z_calib, _x.acc_x, _x.acc_y, _x.acc_z, _x.acc_angle_nick, _x.acc_angle_roll, _x.acc_absolute_value, _x.Hx, _x.Hy, _x.Hz, _x.mag_heading, _x.speed_x, _x.speed_y, _x.speed_z, _x.height, _x.dheight, _x.dheight_reference, _x.height_reference))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 92
      (_x.angle_nick, _x.angle_roll, _x.angle_yaw, _x.angvel_nick, _x.angvel_roll, _x.angvel_yaw, _x.acc_x_calib, _x.acc_y_calib, _x.acc_z_calib, _x.acc_x, _x.acc_y, _x.acc_z, _x.acc_angle_nick, _x.acc_angle_roll, _x.acc_absolute_value, _x.Hx, _x.Hy, _x.Hz, _x.mag_heading, _x.speed_x, _x.speed_y, _x.speed_z, _x.height, _x.dheight, _x.dheight_reference, _x.height_reference,) = _struct_6i6h14i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6i6h14i = struct.Struct("<6i6h14i")

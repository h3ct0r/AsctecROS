"""autogenerated by genpy from asctec_msgs/WaypointData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class WaypointData(genpy.Message):
  _md5sum = "1aea889573a3c976bdc966a2229943a6"
  _type = "asctec_msgs/WaypointData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#always set to 1
uint8 wp_number

#don't care
uint8 dummy_1
uint16 dummy_2

#see WPPROP defines below
uint8 properties

#max speed to travel to waypoint in % (default 100)
uint8 max_speed

#time to stay at a waypoint (XYZ) in 1/100th s
uint16 time

#position accuracy to consider a waypoint reached in mm (default: 2500 (= 2.5 m))
uint16 pos_acc

#chksum = 0xAAAA + wp.yaw + wp.height + wp.time + wp.X + wp.Y + wp.max_speed + wp.pos_acc + wp.properties + wp.wp_number
int16 chksum

#waypoint coordinates in mm; longitude in abs coords
int32 X

#waypoint coordinates in mm; latitude in abs coords
int32 Y

#Desired heading at waypoint
int32 yaw

#height over 0 reference in mm
int32 height

uint32 WPPROP_ABSCOORDS=1
uint32 WPPROP_HEIGHTENABLED=2
uint32 WPPROP_YAWENABLED=4
uint32 WPPROP_AUTOMATICGOTO=16
uint32 WPPROP_CAM_TRIGGER=32

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  # Pseudo-constants
  WPPROP_ABSCOORDS = 1
  WPPROP_HEIGHTENABLED = 2
  WPPROP_YAWENABLED = 4
  WPPROP_AUTOMATICGOTO = 16
  WPPROP_CAM_TRIGGER = 32

  __slots__ = ['header','wp_number','dummy_1','dummy_2','properties','max_speed','time','pos_acc','chksum','X','Y','yaw','height']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint16','uint8','uint8','uint16','uint16','int16','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,wp_number,dummy_1,dummy_2,properties,max_speed,time,pos_acc,chksum,X,Y,yaw,height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wp_number is None:
        self.wp_number = 0
      if self.dummy_1 is None:
        self.dummy_1 = 0
      if self.dummy_2 is None:
        self.dummy_2 = 0
      if self.properties is None:
        self.properties = 0
      if self.max_speed is None:
        self.max_speed = 0
      if self.time is None:
        self.time = 0
      if self.pos_acc is None:
        self.pos_acc = 0
      if self.chksum is None:
        self.chksum = 0
      if self.X is None:
        self.X = 0
      if self.Y is None:
        self.Y = 0
      if self.yaw is None:
        self.yaw = 0
      if self.height is None:
        self.height = 0
    else:
      self.header = std_msgs.msg.Header()
      self.wp_number = 0
      self.dummy_1 = 0
      self.dummy_2 = 0
      self.properties = 0
      self.max_speed = 0
      self.time = 0
      self.pos_acc = 0
      self.chksum = 0
      self.X = 0
      self.Y = 0
      self.yaw = 0
      self.height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2BH2B2Hh4i.pack(_x.wp_number, _x.dummy_1, _x.dummy_2, _x.properties, _x.max_speed, _x.time, _x.pos_acc, _x.chksum, _x.X, _x.Y, _x.yaw, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.wp_number, _x.dummy_1, _x.dummy_2, _x.properties, _x.max_speed, _x.time, _x.pos_acc, _x.chksum, _x.X, _x.Y, _x.yaw, _x.height,) = _struct_2BH2B2Hh4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2BH2B2Hh4i.pack(_x.wp_number, _x.dummy_1, _x.dummy_2, _x.properties, _x.max_speed, _x.time, _x.pos_acc, _x.chksum, _x.X, _x.Y, _x.yaw, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.wp_number, _x.dummy_1, _x.dummy_2, _x.properties, _x.max_speed, _x.time, _x.pos_acc, _x.chksum, _x.X, _x.Y, _x.yaw, _x.height,) = _struct_2BH2B2Hh4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2BH2B2Hh4i = struct.Struct("<2BH2B2Hh4i")

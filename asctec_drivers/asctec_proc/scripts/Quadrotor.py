#!/usr/bin/python

import re
import rospy
import time
import datetime
import math

from asctec_msgs.msg import LLStatus
from asctec_msgs.msg import IMUCalcData
from asctec_msgs.msg import GPSData
from asctec_msgs.msg import CurrentWay

from asctec_msgs.msg import WaypointCommand
from asctec_msgs.msg import WaypointData
from Waypoint import Waypoint

class Quadrotor:

	def __init__(self, VERBOSE=0):
		self.VERBOSE = VERBOSE

		# Getting parameters
		self.name = "/" + rospy.get_param("~quadName", "hum1") # Default Quadrotor name hum1
		self.height = rospy.get_param("~height", 8000) # DefaultDefault  height 8 m
		self.velocity = rospy.get_param("~velocity", 90) # Default velocity of the quadrotor - 90 porcent
		self.waypointFile = rospy.get_param("~mainWaypointFiles", "/var/www/gpsDataPoints.txt") # file with waypoints (from GPS) to control the quadrotor
		self.waypointTime = rospy.get_param("~waypointTime") # Sets time quadrotor will stay at waypoint
		self.externalBaseName = '/' + rospy.get_param("~externalBaseName") # /ext

		if self.VERBOSE:
			print "Initializing Quadrotor ", self.name
			print "Default "+ str(self.height)+"cm height and "+ str(self.velocity)+"%"+" velocity\n"

		# Setting the ROS publishers
		self.waypointCmdPublisher = rospy.Publisher(self.name + '/asctec/WAYCOMMAND', WaypointCommand)
		self.waypointDataPublisher = rospy.Publisher(self.name + '/asctec/WAYPOINT', WaypointData)

		# Setting the ROS subscribers
		rospy.Subscriber(self.name + "/asctec/LL_STATUS", LLStatus, self.llCallback)
		rospy.Subscriber(self.name + "/asctec/GPS_DATA", GPSData, self.gpsCallback)
		rospy.Subscriber(self.name + "/asctec/CURRENT_WAY", CurrentWay, self.currentwCallback)
		rospy.Subscriber(self.name + "/asctec/IMU_CALCDATA", IMUCalcData, self.imuCalcDataCallback)

		# Variables with actual status of Quadrotor
		self.latitude = 0
		self.longitude = 0
		self.height = 5
		self.heading = 0
		self.gpsNumSV = 0

		self.homeLatitude = None
		self.homeLongitude = None
		# Need to be set by Waypoint Manager
		self.currentWaypointIndex = -1
		self.currentExternalWaypointIndex = -1
		
		self.gpsSpeedx = 0 # speed in x (E/W)  in mm/s
		self.gpsSpeedy = 0 # speed in y (N/S) in mm/s
		self.battery = 0
		self.distanceToWp = 0

		self.navStatus = 0
		self.heightImu = 0

		# Enable the Quadrotor to use the external waypoints
		self.thisQuadisRunningExternalWaypoints = False;


	# Return the current waypoint or the external waypoint from list
	def getCurrentWp(self):
		if self.thisQuadisRunningExternalWaypoints is True:
			return self.externalWaypointList[self.currentExternalWaypointIndex]
		else:
			return self.waypointList[self.currentWaypointIndex]

	# Calcute the distance (m) between Waypoint
	def dist(self, lat1, lon1, lat2, lon2):
		#print lat1, lon1, lat2, lon2
		lat1 = math.radians(lat1)
		lon1 = math.radians(lon1)
		lat2 = math.radians(lat2)

		lon2 = math.radians(lon2)
		x = (lon2-lon1) * math.cos((lat1+lat2)/2)
		y = (lat2-lat1)
		d = math.sqrt(x**2+y**2) * 6378137
		return d # in meters



	# Print informations about the status of Quadrotor
	def printStatus(self):
		ts = time.time()
		st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

		print "\33[1;91m"+"________________________________________________________________________________"+"\33[0m"
		print "\t\t\t\t"+st
		print "\t\t\t\t\t\33[1;91m"+self.name+"\33[0m"
		print "\33[1;91m"+"________________________________________________________________________________"+"\33[0m"
		print "Distance generated by UAV          :", self.distanceToWp
		print "Navigation status                  :", self.navStatus
		print "Battery values                     :", self.battery
		# print "Quadrotor speed_x (E/W)   :", quad.gpsSpeedx
		# print "Quadrotor speed_y (N/S)   :", quad.gpsSpeedy

		print "Number of satelites                :", self.gpsNumSV
		print "Latitude                           :", self.latitude
		print "Longitude                          :", self.longitude
		print "Height (IMU)                       :", self.heightImu, "m"
		print "Waypoint Velocity                  :", self.velocity, "%"
		print "\33[1;91m"+"________________________________________________________________________________"+"\33[0m"

		currentWp = None
		if self.thisQuadisRunningExternalWaypoints is True:
			currentWp = self.externalWaypointList[self.currentExternalWaypointIndex]
			print "Current External Waypoint Number   :", str(self.currentExternalWaypointIndex) +" of "+ str(self.externalWaypointListSize)
		else:
			currentWp = self.waypointList[self.currentWaypointIndex]
			print "Current Waypoint Number            :", str(self.currentWaypointIndex) +" of "+ str(self.waypointListSize)

		
		print "Current waypoint (Y, X)            :", currentWp['Y'], currentWp['X']
		self.currentDistanceCalculated = self.dist(self.latitude, self.longitude, currentWp['Y'], currentWp['X'])
		print "Distance calculated by WM          :", self.currentDistanceCalculated
		
		print "\33[1;91m"+"________________________________________________________________________________"+"\33[0m"


	# This function get the /ext and the /hum*(from respective quadrotor) waypoints from main waypoint file and save in two separated list
	def getWaypointFromFile(self):
		if self.VERBOSE:
			print "Loading Waypoints from ", self.waypointFile

		dataInputsFile = open(self.waypointFile, "r")

		self.externalWaypointList = []
		self.waypointList = []

		# Read the lines of the file and separate the x and y coordinates
		# Saves the coordinates in their respective lists
		for line in dataInputsFile:
			y = re.search(r',([-*]\d+.\d+),', line)
			x = re.search(r',([-*]\d+.\d+)\n', line)
			
			fileBaseName = re.search(r'([\/]ext)', line)
			fileQuadrotorBaseName = re.search(r'([\/]hum\d)', line)
			
			waypoint = {}
			waypoint['X'] = float(x.group(1))
			waypoint['Y'] = float(y.group(1))
			waypoint['Z'] = 2 # Maybe we can try use the height from Quadrotor

			if(fileBaseName != None and fileBaseName.group(1) == self.externalBaseName): # Compare to /ext
				self.externalWaypointList.append(waypoint)
				
			elif(fileQuadrotorBaseName != None and fileQuadrotorBaseName.group(1) == self.name): # Compare to /hum*
				self.waypointList.append(waypoint)
				
		dataInputsFile.close()

		self.externalWaypointListSize = len(self.externalWaypointList)
		self.waypointListSize = len(self.waypointList)

		# Sets the current quads waypointList_size_param
		if rospy.has_param("~waypointListSize"):
			rospy.set_param("~waypointListSize", self.waypointListSize)

		if self.VERBOSE:
			print "A total of " + str(self.waypointListSize) + " Waypoints and " + str(self.externalWaypointListSize) + " external Waypoints was loaded.\n"

####################################### Callbacks ##################################################

	def gpsCallback(self, data):
		self.latitude = float(data.latitude)/float(10**7)
		self.longitude = float(data.longitude)/float(10**7)
		self.height = float(data.height)/1000.0
		self.heading = float(data.heading)/1000.0
		self.gpsNumSV = int(data.numSV)
		self.gpsSpeedx = int(data.speed_x)
		self.gpsSpeedy = int(data.speed_y)

	def llCallback(self, data):
		self.battery = float(data.battery_voltage_1)/1000.0

	def currentwCallback(self, data):
		self.navStatus = int(data.navigation_status)
		self.distanceToWp = float(data.distance_to_wp)*float(10)

	def imuCalcDataCallback(self, data):
		self.heightImu = int(data.height) #height after data fusion [mm]
		# self.height_val = int(data.height_reference) # height measured by the pressure sensor [mm]
###################################################################################################		


####################################### Commands ##################################################
	def setHomeWaypoint(self):
		self.launchQuadrotor()
		# Save home latitude and longitude
		self.homeLatitude = self.latitude
		self.homeLongitude = self.longitude
		if self.VERBOSE:
			print "Home Waypoint "+str(self.homeLatitude)+" latitude "+str(self.longitude)+" longitude"


	def launchQuadrotor(self):
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>wl"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)


	def landQuadrotor(self):
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>we"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)


	def comeHomeQuadrotor(self):
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>wh"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)


	def gotoWaypoint(self, waypointIndex):
		#Before the command was set to send before the waypoint is ready. Was moved to here in the code.
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>wg"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)

		currentWp = self.waypointList[waypointIndex]
		wp = Waypoint(currentWp['X'], currentWp['Y'], self.height, 0, self.velocity, self.waypointTime)
		wp.getWaypoint() #usado para calcular chksum e parametros restantes nao inicializados
		waypointData = wp.getWaypointStruct()
		waypointData.header.stamp = rospy.get_rostime()
		self.waypointDataPublisher.publish(waypointData)
###################################################################################################			
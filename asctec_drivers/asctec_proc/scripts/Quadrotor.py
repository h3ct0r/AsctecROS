#!/usr/bin/python
import rospy
import time
import datetime

from asctec_msgs.msg import LLStatus
from asctec_msgs.msg import IMUCalcData
from asctec_msgs.msg import GPSData
from asctec_msgs.msg import CurrentWay

from asctec_msgs.msg import WaypointCommand
from asctec_msgs.msg import WaypointData
from Waypoint import Waypoint

class Quadrotor:
	def __init__(self, VERBOSE=0):
		self.VERBOSE = VERBOSE

		# Getting parameters
		self.name = "/" + rospy.get_param("~quadName", "hum1") # Default Quadrotor name hum1
		self.height = rospy.get_param("~height", 8000) # DefaultDefault  height 8 m
		self.velocity = rospy.get_param("~velocity", 90) # Default velocity of the quadrotor - 90 porcent
		self.waypointTime = rospy.get_param("~waypointTime", 1) # Sets time quadrotor will stay at waypoint

		if self.VERBOSE:
			print "Initializing Quadrotor ", self.name
			print "Default "+ str(self.height)+"cm height and "+ str(self.velocity)+"%"+" velocity\n"

		# Setting the ROS publishers
		self.waypointCmdPublisher = rospy.Publisher(self.name + '/asctec/WAYCOMMAND', WaypointCommand, queue_size=10)
		self.waypointDataPublisher = rospy.Publisher(self.name + '/asctec/WAYPOINT', WaypointData, queue_size=10)

		# Setting the ROS subscribers
		rospy.Subscriber(self.name + "/asctec/LL_STATUS", LLStatus, self.llCallback)
		rospy.Subscriber(self.name + "/asctec/GPS_DATA", GPSData, self.gpsCallback)
		rospy.Subscriber(self.name + "/asctec/CURRENT_WAY", CurrentWay, self.currentwCallback)
		rospy.Subscriber(self.name + "/asctec/IMU_CALCDATA", IMUCalcData, self.imuCalcDataCallback)

		# Variables with actual status of Quadrotor
		self.latitude = 0
		self.longitude = 0
		self.altitude = 5
		self.heading = 0
		self.gpsNumSV = 0

		self.homeLatitude = None
		self.homeLongitude = None
		self.homeAltitude = None
		
		self.gpsSpeedx = 0 # speed in x (E/W)  in mm/s
		self.gpsSpeedy = 0 # speed in y (N/S) in mm/s
		self.battery = 0
		self.batteryPercent = 0
		self.distanceToWp = 0
		self.heightImu = 0

		# navStatus is the combination of:
		#navStatus 0x01 //vehicle has entered a radius of WAYPOINT.pos_acc and time to stay is not neccessarily over
		#navStatus 0x02 //vehicle is within a radius of WAYPOINT.pos_acc and time to stay is over
		#navStatus 0x04 //vehicle within a 20m radius of the waypoint
		#navStatus 0x08 //waypoint navigation aborted by safety pilot
		self.navStatus = 0
		
		# Enable the Quadrotor to use the external waypoints
		self.thisQuadisRunningExternalWaypoints = False;

		# log height latitude and longitude
		fileName = rospy.get_param("~mapFileName", "/tmp/out.txt")
		self.logFile = open(fileName+'.txt', 'w')
		self.logFile.write("Latitude, Longitude, HeightImu\n")

	# Print informations about the status of Quadrotor
	def printStatus(self):
		ts = time.time()
		st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

		print "\33[1;91m________________________________________________________________________________\33[0m"
		print "\t\t\t    "+st
		print "\33[1;91m________________________________________________________________________________\33[0m"
		print "\33[1;91m                              Quadrotor Status                                  \33[0m"                           
		print "\33[1;91m________________________________________________________________________________\33[0m"
		print "Name                               :", self.name
		print "Navigation status                  :", self.navStatus
		print "Battery status                     :", self.battery
		# print "Quadrotor speed_x (E/W)   :", quad.gpsSpeedx
		# print "Quadrotor speed_y (N/S)   :", quad.gpsSpeedy
		print "Distance generated by UAV          :", self.distanceToWp
		print "Number of satelites                :", self.gpsNumSV
		print "Home Position                      :", self.homeLatitude, self.homeLongitude
		print "Current Position                   :", self.latitude, self.longitude
		print "Height (IMU)                       :", self.heightImu, "m"
		print "Waypoint Velocity                  :", self.velocity, "%"
		print "\33[1;91m________________________________________________________________________________\33[0m"

####################################### Callbacks ##################################################

	def gpsCallback(self, data):
		self.latitude = float(data.latitude)/float(10**7)
		self.longitude = float(data.longitude)/float(10**7)
		self.altitude = float(data.height)/1000.0
		self.gpsNumSV = int(data.numSV)
		self.gpsSpeedx = int(data.speed_x)
		self.gpsSpeedy = int(data.speed_y)

	def llCallback(self, data):
		self.battery = float(data.battery_voltage_1)/1000.0
		self.batteryPercent = int(100*(self.battery - 10.2)/(12.6-10.2))

	def currentwCallback(self, data):
		self.navStatus = int(data.navigation_status)
		self.distanceToWp = float(data.distance_to_wp)*float(10)

	def imuCalcDataCallback(self, data):
		self.heightImu = int(data.height) #height after data fusion [mm]
		# self.height_val = int(data.height_reference) # height measured by the pressure sensor [mm]
		self.heading = float(data.mag_heading)/float(1000)
###################################################################################################		


####################################### Commands ##################################################
	def setHomeWaypoint(self):
		self.launchQuadrotor()
		# Save home latitude and longitude
		self.homeLatitude = self.latitude
		self.homeLongitude = self.longitude
		self.homeAltitude = self.altitude
		if self.VERBOSE:
			print "Home Waypoint "+str(self.homeLatitude)+" latitude "+str(self.longitude)+" longitude"

	def launchQuadrotor(self):
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>wl"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)

	def landQuadrotor(self):
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>we"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)

	def comeHomeQuadrotor(self):
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>wh"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)

	def gotoWaypoint(self, currentWp):
		#Before the command was set to send before the waypoint is ready. Was moved to here in the code.
		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>ws"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)

		if currentWp['height'] == None:
			wp = Waypoint(currentWp['lng'], currentWp['lat'], self.height, 0, self.velocity, self.waypointTime)
		else:
			wp = Waypoint(currentWp['lng'], currentWp['lat'], currentWp['height'], 0, self.velocity, self.waypointTime)
			self.height = currentWp['height']

		wp.getWaypoint() #usado para calcular chksum e parametros restantes nao inicializados
		waypointData = wp.getWaypointStruct()
		waypointData.header.stamp = rospy.get_rostime()
		self.waypointDataPublisher.publish(waypointData)

		wpCommand = WaypointCommand()
		wpCommand.cmd = ">*>wg"
		wpCommand.header.stamp = rospy.get_rostime()
		self.waypointCmdPublisher.publish(wpCommand)
###################################################################################################			